package com.papitomarket.model.cache;import java.util.ArrayList;import java.util.List;import com.papitomarket.model.database.GlobalData;import com.papitomarket.model.facebook.android.User;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.SQLException;import android.database.sqlite.SQLiteDatabase;import android.util.Log;public class CacheDataSource {	// Database fields	  private SQLiteDatabase database;	  private GlobalData dbHelper;	  private String[] allColumns = { GlobalData.COLUMN_CACHE_ID,	      GlobalData.COLUMN_CACHE_URL, GlobalData.COLUMN_CACHE_CACHE};	  	  public CacheDataSource(Context c){		  dbHelper = GlobalData.getInstance(c);		 // if (!database.isOpen()){		  database = dbHelper.getWritableDatabase();		 // }	  }	  	  public void open() throws SQLException {	    	  }	  public void close() {	    dbHelper.close();	  }	  public Cache createCache(Cache u) {		    ContentValues values = new ContentValues();		    		    values.put(GlobalData.COLUMN_CACHE_URL, u.getUrl());		    values.put(GlobalData.COLUMN_CACHE_CACHE, u.getCache());		    long insertId = database.insert(GlobalData.TABLE_CACHE, null,values);		    Cursor cursor = database.query(GlobalData.TABLE_CACHE,allColumns, GlobalData.COLUMN_CACHE_ID + " = " + insertId, null,null, null, null);		    cursor.moveToFirst();		    Cache newCache = cursorToCache(cursor);		    cursor.close();		    return newCache;	    }	  public void deleteCache(Cache u) {	    long id = new Long(u.getId());	    Log.i("SMARTBANDS","Cache deleted with id: " + id);	    database.delete(GlobalData.TABLE_CACHE, GlobalData.COLUMN_CACHE_ID + " = " + id, null);	  }	  public List<Cache> getAllCaches() {	    List<Cache> Caches = new ArrayList<Cache>();	    Cursor cursor = database.rawQuery("SELECT * FROM caches",null);	    cursor.moveToFirst();	    while (!cursor.isAfterLast()) {	      Cache u = cursorToCache(cursor);	      Caches.add(u);	      cursor.moveToNext();	    }	    // Make sure to close the cursor	    cursor.close();	    return Caches;	  }	  private Cache cursorToCache(Cursor cursor) {		if (cursor.getCount()>0){	      Cache u = new Cache(cursor.getInt(0), cursor.getString(1), cursor.getString(2));	      return u;		} else {			return null;		}	  }	  public Cache findByUrl(String url){		  String[] strs = {url.replace(" ", "%20").toString()};		  Cursor cu = database.rawQuery("select id,url,cache from caches where (url = ?)", strs);		  		  if (cu.getCount()>0){			  cu.moveToFirst();			  return (new Cache(cu.getLong(0),cu.getString(1),cu.getString(2)));  		  } else {			  return null;		  }		  	  }						}